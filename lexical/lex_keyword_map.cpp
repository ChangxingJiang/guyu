#include "lexical/lex_keyword_map.h"

/**
 * 构造关键字字符串到 Token 类型的映射
 *
 * @return 关键字字符串到 Token 类型的映射
 */
std::unordered_map<std::string, int> init_lex_keyword_map() {
    std::unordered_map<std::string, int> keyword_map;

    keyword_map.insert(std::make_pair("accessible", KEYWORD_ACCESSIBLE));
    keyword_map.insert(std::make_pair("account", KEYWORD_ACCOUNT));
    keyword_map.insert(std::make_pair("action", KEYWORD_ACTION));
    keyword_map.insert(std::make_pair("active", KEYWORD_ACTIVE));
    keyword_map.insert(std::make_pair("add", KEYWORD_ADD));
    keyword_map.insert(std::make_pair("admin", KEYWORD_ADMIN));
    keyword_map.insert(std::make_pair("after", KEYWORD_AFTER));
    keyword_map.insert(std::make_pair("against", KEYWORD_AGAINST));
    keyword_map.insert(std::make_pair("aggregate", KEYWORD_AGGREGATE));
    keyword_map.insert(std::make_pair("algorithm", KEYWORD_ALGORITHM));
    keyword_map.insert(std::make_pair("all", KEYWORD_ALL));
    keyword_map.insert(std::make_pair("alter", KEYWORD_ALTER));
    keyword_map.insert(std::make_pair("always", KEYWORD_ALWAYS));
    keyword_map.insert(std::make_pair("analyze", KEYWORD_ANALYZE));
    keyword_map.insert(std::make_pair("and", KEYWORD_AND));
    keyword_map.insert(std::make_pair("any", KEYWORD_ANY));
    keyword_map.insert(std::make_pair("array", KEYWORD_ARRAY));
    keyword_map.insert(std::make_pair("as", KEYWORD_AS));
    keyword_map.insert(std::make_pair("asc", KEYWORD_ASC));
    keyword_map.insert(std::make_pair("ascii", KEYWORD_ASCII));
    keyword_map.insert(std::make_pair("asensitive", KEYWORD_ASENSITIVE));
    keyword_map.insert(std::make_pair("at", KEYWORD_AT));
    keyword_map.insert(std::make_pair("attribute", KEYWORD_ATTRIBUTE));
    keyword_map.insert(std::make_pair("authentication", KEYWORD_AUTHENTICATION));
    keyword_map.insert(std::make_pair("auto_inc", KEYWORD_AUTO_INC));
    keyword_map.insert(std::make_pair("autoextend_size", KEYWORD_AUTOEXTEND_SIZE));
    keyword_map.insert(std::make_pair("auto_increment", KEYWORD_AUTO_INCREMENT));
    keyword_map.insert(std::make_pair("avg", KEYWORD_AVG));
    keyword_map.insert(std::make_pair("avg_row_length", KEYWORD_AVG_ROW_LENGTH));
    keyword_map.insert(std::make_pair("backup", KEYWORD_BACKUP));
    keyword_map.insert(std::make_pair("before", KEYWORD_BEFORE));
    keyword_map.insert(std::make_pair("begin", KEYWORD_BEGIN));
    keyword_map.insert(std::make_pair("bernoulli", KEYWORD_BERNOULLI));
    keyword_map.insert(std::make_pair("between", KEYWORD_BETWEEN));
    keyword_map.insert(std::make_pair("bigint", KEYWORD_BIGINT));
    keyword_map.insert(std::make_pair("binary", KEYWORD_BINARY));
    keyword_map.insert(std::make_pair("binlog", KEYWORD_BINLOG));
    keyword_map.insert(std::make_pair("bit", KEYWORD_BIT));
    keyword_map.insert(std::make_pair("blob", KEYWORD_BLOB));
    keyword_map.insert(std::make_pair("block", KEYWORD_BLOCK));
    keyword_map.insert(std::make_pair("bool", KEYWORD_BOOL));
    keyword_map.insert(std::make_pair("boolean", KEYWORD_BOOLEAN));
    keyword_map.insert(std::make_pair("both", KEYWORD_BOTH));
    keyword_map.insert(std::make_pair("btree", KEYWORD_BTREE));
    keyword_map.insert(std::make_pair("buckets", KEYWORD_BUCKETS));
    keyword_map.insert(std::make_pair("bulk", KEYWORD_BULK));
    keyword_map.insert(std::make_pair("by", KEYWORD_BY));
    keyword_map.insert(std::make_pair("byte", KEYWORD_BYTE));
    keyword_map.insert(std::make_pair("cache", KEYWORD_CACHE));
    keyword_map.insert(std::make_pair("call", KEYWORD_CALL));
    keyword_map.insert(std::make_pair("cascade", KEYWORD_CASCADE));
    keyword_map.insert(std::make_pair("cascaded", KEYWORD_CASCADED));
    keyword_map.insert(std::make_pair("case", KEYWORD_CASE));
    keyword_map.insert(std::make_pair("catalog_name", KEYWORD_CATALOG_NAME));
    keyword_map.insert(std::make_pair("chain", KEYWORD_CHAIN));
    keyword_map.insert(std::make_pair("challenge_response", KEYWORD_CHALLENGE_RESPONSE));
    keyword_map.insert(std::make_pair("change", KEYWORD_CHANGE));
    keyword_map.insert(std::make_pair("changed", KEYWORD_CHANGED));
    keyword_map.insert(std::make_pair("channel", KEYWORD_CHANNEL));
    keyword_map.insert(std::make_pair("char", KEYWORD_CHAR));
    keyword_map.insert(std::make_pair("character", KEYWORD_CHARACTER));
    keyword_map.insert(std::make_pair("charset", KEYWORD_CHARSET));
    keyword_map.insert(std::make_pair("check", KEYWORD_CHECK));
    keyword_map.insert(std::make_pair("checksum", KEYWORD_CHECKSUM));
    keyword_map.insert(std::make_pair("cipher", KEYWORD_CIPHER));
    keyword_map.insert(std::make_pair("class_origin", KEYWORD_CLASS_ORIGIN));
    keyword_map.insert(std::make_pair("client", KEYWORD_CLIENT));
    keyword_map.insert(std::make_pair("clone", KEYWORD_CLONE));
    keyword_map.insert(std::make_pair("close", KEYWORD_CLOSE));
    keyword_map.insert(std::make_pair("coalesce", KEYWORD_COALESCE));
    keyword_map.insert(std::make_pair("code", KEYWORD_CODE));
    keyword_map.insert(std::make_pair("collate", KEYWORD_COLLATE));
    keyword_map.insert(std::make_pair("collation", KEYWORD_COLLATION));
    keyword_map.insert(std::make_pair("column", KEYWORD_COLUMN));
    keyword_map.insert(std::make_pair("columns", KEYWORD_COLUMNS));
    keyword_map.insert(std::make_pair("column_format", KEYWORD_COLUMN_FORMAT));
    keyword_map.insert(std::make_pair("column_name", KEYWORD_COLUMN_NAME));
    keyword_map.insert(std::make_pair("comment", KEYWORD_COMMENT));
    keyword_map.insert(std::make_pair("commit", KEYWORD_COMMIT));
    keyword_map.insert(std::make_pair("committed", KEYWORD_COMMITTED));
    keyword_map.insert(std::make_pair("compact", KEYWORD_COMPACT));
    keyword_map.insert(std::make_pair("completion", KEYWORD_COMPLETION));
    keyword_map.insert(std::make_pair("component", KEYWORD_COMPONENT));
    keyword_map.insert(std::make_pair("compressed", KEYWORD_COMPRESSED));
    keyword_map.insert(std::make_pair("compression", KEYWORD_COMPRESSION));
    keyword_map.insert(std::make_pair("concurrent", KEYWORD_CONCURRENT));
    keyword_map.insert(std::make_pair("condition", KEYWORD_CONDITION));
    keyword_map.insert(std::make_pair("connection", KEYWORD_CONNECTION));
    keyword_map.insert(std::make_pair("consistent", KEYWORD_CONSISTENT));
    keyword_map.insert(std::make_pair("constraint", KEYWORD_CONSTRAINT));
    keyword_map.insert(std::make_pair("constraint_catalog", KEYWORD_CONSTRAINT_CATALOG));
    keyword_map.insert(std::make_pair("constraint_name", KEYWORD_CONSTRAINT_NAME));
    keyword_map.insert(std::make_pair("constraint_schema", KEYWORD_CONSTRAINT_SCHEMA));
    keyword_map.insert(std::make_pair("contains", KEYWORD_CONTAINS));
    keyword_map.insert(std::make_pair("context", KEYWORD_CONTEXT));
    keyword_map.insert(std::make_pair("continue", KEYWORD_CONTINUE));
    keyword_map.insert(std::make_pair("convert", KEYWORD_CONVERT));
    keyword_map.insert(std::make_pair("cpu", KEYWORD_CPU));
    keyword_map.insert(std::make_pair("create", KEYWORD_CREATE));
    keyword_map.insert(std::make_pair("cross", KEYWORD_CROSS));
    keyword_map.insert(std::make_pair("cube", KEYWORD_CUBE));
    keyword_map.insert(std::make_pair("cume_dist", KEYWORD_CUME_DIST));
    keyword_map.insert(std::make_pair("current", KEYWORD_CURRENT));
    keyword_map.insert(std::make_pair("current_date", KEYWORD_CURRENT_DATE));
    keyword_map.insert(std::make_pair("current_time", KEYWORD_CURRENT_TIME));
    keyword_map.insert(std::make_pair("current_timestamp", KEYWORD_CURRENT_TIMESTAMP));
    keyword_map.insert(std::make_pair("current_user", KEYWORD_CURRENT_USER));
    keyword_map.insert(std::make_pair("cursor", KEYWORD_CURSOR));
    keyword_map.insert(std::make_pair("cursor_name", KEYWORD_CURSOR_NAME));
    keyword_map.insert(std::make_pair("data", KEYWORD_DATA));
    keyword_map.insert(std::make_pair("database", KEYWORD_DATABASE));
    keyword_map.insert(std::make_pair("databases", KEYWORD_DATABASES));
    keyword_map.insert(std::make_pair("datafile", KEYWORD_DATAFILE));
    keyword_map.insert(std::make_pair("date", KEYWORD_DATE));
    keyword_map.insert(std::make_pair("datetime", KEYWORD_DATETIME));
    keyword_map.insert(std::make_pair("day", KEYWORD_DAY));
    keyword_map.insert(std::make_pair("day_hour", KEYWORD_DAY_HOUR));
    keyword_map.insert(std::make_pair("day_microsecond", KEYWORD_DAY_MICROSECOND));
    keyword_map.insert(std::make_pair("day_minute", KEYWORD_DAY_MINUTE));
    keyword_map.insert(std::make_pair("day_second", KEYWORD_DAY_SECOND));
    keyword_map.insert(std::make_pair("deallocate", KEYWORD_DEALLOCATE));
    keyword_map.insert(std::make_pair("dec", KEYWORD_DEC));
    keyword_map.insert(std::make_pair("decimal", KEYWORD_DECIMAL));
    keyword_map.insert(std::make_pair("declare", KEYWORD_DECLARE));
    keyword_map.insert(std::make_pair("default", KEYWORD_DEFAULT));
    keyword_map.insert(std::make_pair("default_auth", KEYWORD_DEFAULT_AUTH));
    keyword_map.insert(std::make_pair("definer", KEYWORD_DEFINER));
    keyword_map.insert(std::make_pair("definition", KEYWORD_DEFINITION));
    keyword_map.insert(std::make_pair("delayed", KEYWORD_DELAYED));
    keyword_map.insert(std::make_pair("delay_key_write", KEYWORD_DELAY_KEY_WRITE));
    keyword_map.insert(std::make_pair("delete", KEYWORD_DELETE));
    keyword_map.insert(std::make_pair("dense_rank", KEYWORD_DENSE_RANK));
    keyword_map.insert(std::make_pair("desc", KEYWORD_DESC));
    keyword_map.insert(std::make_pair("describe", KEYWORD_DESCRIBE));
    keyword_map.insert(std::make_pair("description", KEYWORD_DESCRIPTION));
    keyword_map.insert(std::make_pair("deterministic", KEYWORD_DETERMINISTIC));
    keyword_map.insert(std::make_pair("diagnostics", KEYWORD_DIAGNOSTICS));
    keyword_map.insert(std::make_pair("directory", KEYWORD_DIRECTORY));
    keyword_map.insert(std::make_pair("disable", KEYWORD_DISABLE));
    keyword_map.insert(std::make_pair("discard", KEYWORD_DISCARD));
    keyword_map.insert(std::make_pair("disk", KEYWORD_DISK));
    keyword_map.insert(std::make_pair("distinct", KEYWORD_DISTINCT));
    keyword_map.insert(std::make_pair("distinctrow", KEYWORD_DISTINCTROW));
    keyword_map.insert(std::make_pair("div", KEYWORD_DIV));
    keyword_map.insert(std::make_pair("do", KEYWORD_DO));
    keyword_map.insert(std::make_pair("double", KEYWORD_DOUBLE));
    keyword_map.insert(std::make_pair("drop", KEYWORD_DROP));
    keyword_map.insert(std::make_pair("dual", KEYWORD_DUAL));
    keyword_map.insert(std::make_pair("dumpfile", KEYWORD_DUMPFILE));
    keyword_map.insert(std::make_pair("duplicate", KEYWORD_DUPLICATE));
    keyword_map.insert(std::make_pair("dynamic", KEYWORD_DYNAMIC));
    keyword_map.insert(std::make_pair("each", KEYWORD_EACH));
    keyword_map.insert(std::make_pair("else", KEYWORD_ELSE));
    keyword_map.insert(std::make_pair("elseif", KEYWORD_ELSEIF));
    keyword_map.insert(std::make_pair("empty", KEYWORD_EMPTY));
    keyword_map.insert(std::make_pair("enable", KEYWORD_ENABLE));
    keyword_map.insert(std::make_pair("enclosed", KEYWORD_ENCLOSED));
    keyword_map.insert(std::make_pair("encryption", KEYWORD_ENCRYPTION));
    keyword_map.insert(std::make_pair("end", KEYWORD_END));
    keyword_map.insert(std::make_pair("ends", KEYWORD_ENDS));
    keyword_map.insert(std::make_pair("enforced", KEYWORD_ENFORCED));
    keyword_map.insert(std::make_pair("engine", KEYWORD_ENGINE));
    keyword_map.insert(std::make_pair("engines", KEYWORD_ENGINES));
    keyword_map.insert(std::make_pair("engine_attribute", KEYWORD_ENGINE_ATTRIBUTE));
    keyword_map.insert(std::make_pair("enum", KEYWORD_ENUM));
    keyword_map.insert(std::make_pair("error", KEYWORD_ERROR));
    keyword_map.insert(std::make_pair("errors", KEYWORD_ERRORS));
    keyword_map.insert(std::make_pair("escape", KEYWORD_ESCAPE));
    keyword_map.insert(std::make_pair("escaped", KEYWORD_ESCAPED));
    keyword_map.insert(std::make_pair("event", KEYWORD_EVENT));
    keyword_map.insert(std::make_pair("events", KEYWORD_EVENTS));
    keyword_map.insert(std::make_pair("every", KEYWORD_EVERY));
    keyword_map.insert(std::make_pair("except", KEYWORD_EXCEPT));
    keyword_map.insert(std::make_pair("exchange", KEYWORD_EXCHANGE));
    keyword_map.insert(std::make_pair("exclude", KEYWORD_EXCLUDE));
    keyword_map.insert(std::make_pair("execute", KEYWORD_EXECUTE));
    keyword_map.insert(std::make_pair("exists", KEYWORD_EXISTS));
    keyword_map.insert(std::make_pair("exit", KEYWORD_EXIT));
    keyword_map.insert(std::make_pair("expansion", KEYWORD_EXPANSION));
    keyword_map.insert(std::make_pair("expire", KEYWORD_EXPIRE));
    keyword_map.insert(std::make_pair("explain", KEYWORD_EXPLAIN));
    keyword_map.insert(std::make_pair("export", KEYWORD_EXPORT));
    keyword_map.insert(std::make_pair("extended", KEYWORD_EXTENDED));
    keyword_map.insert(std::make_pair("extent_size", KEYWORD_EXTENT_SIZE));
    keyword_map.insert(std::make_pair("factor", KEYWORD_FACTOR));
    keyword_map.insert(std::make_pair("failed_login_attempts", KEYWORD_FAILED_LOGIN_ATTEMPTS));
    keyword_map.insert(std::make_pair("false", KEYWORD_FALSE));
    keyword_map.insert(std::make_pair("fast", KEYWORD_FAST));
    keyword_map.insert(std::make_pair("faults", KEYWORD_FAULTS));
    keyword_map.insert(std::make_pair("fetch", KEYWORD_FETCH));
    keyword_map.insert(std::make_pair("fields", KEYWORD_FIELDS));
    keyword_map.insert(std::make_pair("file", KEYWORD_FILE));
    keyword_map.insert(std::make_pair("file_block_size", KEYWORD_FILE_BLOCK_SIZE));
    keyword_map.insert(std::make_pair("filter", KEYWORD_FILTER));
    keyword_map.insert(std::make_pair("finish", KEYWORD_FINISH));
    keyword_map.insert(std::make_pair("first", KEYWORD_FIRST));
    keyword_map.insert(std::make_pair("first_value", KEYWORD_FIRST_VALUE));
    keyword_map.insert(std::make_pair("fixed", KEYWORD_FIXED));
    keyword_map.insert(std::make_pair("float", KEYWORD_FLOAT));
    keyword_map.insert(std::make_pair("float4", KEYWORD_FLOAT4));
    keyword_map.insert(std::make_pair("float8", KEYWORD_FLOAT8));
    keyword_map.insert(std::make_pair("flush", KEYWORD_FLUSH));
    keyword_map.insert(std::make_pair("following", KEYWORD_FOLLOWING));
    keyword_map.insert(std::make_pair("follows", KEYWORD_FOLLOWS));
    keyword_map.insert(std::make_pair("for", KEYWORD_FOR));
    keyword_map.insert(std::make_pair("force", KEYWORD_FORCE));
    keyword_map.insert(std::make_pair("foreign", KEYWORD_FOREIGN));
    keyword_map.insert(std::make_pair("format", KEYWORD_FORMAT));
    keyword_map.insert(std::make_pair("found", KEYWORD_FOUND));
    keyword_map.insert(std::make_pair("from", KEYWORD_FROM));
    keyword_map.insert(std::make_pair("full", KEYWORD_FULL));
    keyword_map.insert(std::make_pair("fulltext", KEYWORD_FULLTEXT));
    keyword_map.insert(std::make_pair("function", KEYWORD_FUNCTION));
    keyword_map.insert(std::make_pair("general", KEYWORD_GENERAL));
    keyword_map.insert(std::make_pair("generate", KEYWORD_GENERATE));
    keyword_map.insert(std::make_pair("generated", KEYWORD_GENERATED));
    keyword_map.insert(std::make_pair("geomcollection", KEYWORD_GEOMCOLLECTION));
    keyword_map.insert(std::make_pair("geometry", KEYWORD_GEOMETRY));
    keyword_map.insert(std::make_pair("geometrycollection", KEYWORD_GEOMETRYCOLLECTION));
    keyword_map.insert(std::make_pair("get", KEYWORD_GET));
    keyword_map.insert(std::make_pair("get_master_public_key", KEYWORD_GET_MASTER_PUBLIC_KEY));
    keyword_map.insert(std::make_pair("get_format", KEYWORD_GET_FORMAT));
    keyword_map.insert(std::make_pair("get_source_public_key", KEYWORD_GET_SOURCE_PUBLIC_KEY));
    keyword_map.insert(std::make_pair("global", KEYWORD_GLOBAL));
    keyword_map.insert(std::make_pair("grant", KEYWORD_GRANT));
    keyword_map.insert(std::make_pair("grants", KEYWORD_GRANTS));
    keyword_map.insert(std::make_pair("group", KEYWORD_GROUP));
    keyword_map.insert(std::make_pair("grouping", KEYWORD_GROUPING));
    keyword_map.insert(std::make_pair("groups", KEYWORD_GROUPS));
    keyword_map.insert(std::make_pair("group_replication", KEYWORD_GROUP_REPLICATION));
    keyword_map.insert(std::make_pair("gtids", KEYWORD_GTIDS));
    keyword_map.insert(std::make_pair("gtid_only", KEYWORD_GTID_ONLY));
    keyword_map.insert(std::make_pair("handler", KEYWORD_HANDLER));
    keyword_map.insert(std::make_pair("hash", KEYWORD_HASH));
    keyword_map.insert(std::make_pair("having", KEYWORD_HAVING));
    keyword_map.insert(std::make_pair("help", KEYWORD_HELP));
    keyword_map.insert(std::make_pair("high_priority", KEYWORD_HIGH_PRIORITY));
    keyword_map.insert(std::make_pair("histogram", KEYWORD_HISTOGRAM));
    keyword_map.insert(std::make_pair("history", KEYWORD_HISTORY));
    keyword_map.insert(std::make_pair("host", KEYWORD_HOST));
    keyword_map.insert(std::make_pair("hosts", KEYWORD_HOSTS));
    keyword_map.insert(std::make_pair("hour", KEYWORD_HOUR));
    keyword_map.insert(std::make_pair("hour_microsecond", KEYWORD_HOUR_MICROSECOND));
    keyword_map.insert(std::make_pair("hour_minute", KEYWORD_HOUR_MINUTE));
    keyword_map.insert(std::make_pair("hour_second", KEYWORD_HOUR_SECOND));
    keyword_map.insert(std::make_pair("identified", KEYWORD_IDENTIFIED));
    keyword_map.insert(std::make_pair("if", KEYWORD_IF));
    keyword_map.insert(std::make_pair("ignore", KEYWORD_IGNORE));
    keyword_map.insert(std::make_pair("ignore_server_ids", KEYWORD_IGNORE_SERVER_IDS));
    keyword_map.insert(std::make_pair("import", KEYWORD_IMPORT));
    keyword_map.insert(std::make_pair("in", KEYWORD_IN));
    keyword_map.insert(std::make_pair("inactive", KEYWORD_INACTIVE));
    keyword_map.insert(std::make_pair("index", KEYWORD_INDEX));
    keyword_map.insert(std::make_pair("indexes", KEYWORD_INDEXES));
    keyword_map.insert(std::make_pair("infile", KEYWORD_INFILE));
    keyword_map.insert(std::make_pair("initial", KEYWORD_INITIAL));
    keyword_map.insert(std::make_pair("initial_size", KEYWORD_INITIAL_SIZE));
    keyword_map.insert(std::make_pair("initiate", KEYWORD_INITIATE));
    keyword_map.insert(std::make_pair("inner", KEYWORD_INNER));
    keyword_map.insert(std::make_pair("inout", KEYWORD_INOUT));
    keyword_map.insert(std::make_pair("insensitive", KEYWORD_INSENSITIVE));
    keyword_map.insert(std::make_pair("insert", KEYWORD_INSERT));
    keyword_map.insert(std::make_pair("insert_method", KEYWORD_INSERT_METHOD));
    keyword_map.insert(std::make_pair("install", KEYWORD_INSTALL));
    keyword_map.insert(std::make_pair("instance", KEYWORD_INSTANCE));
    keyword_map.insert(std::make_pair("int", KEYWORD_INT));
    keyword_map.insert(std::make_pair("int1", KEYWORD_INT1));
    keyword_map.insert(std::make_pair("int2", KEYWORD_INT2));
    keyword_map.insert(std::make_pair("int3", KEYWORD_INT3));
    keyword_map.insert(std::make_pair("int4", KEYWORD_INT4));
    keyword_map.insert(std::make_pair("int8", KEYWORD_INT8));
    keyword_map.insert(std::make_pair("integer", KEYWORD_INTEGER));
    keyword_map.insert(std::make_pair("intersect", KEYWORD_INTERSECT));
    keyword_map.insert(std::make_pair("interval", KEYWORD_INTERVAL));
    keyword_map.insert(std::make_pair("into", KEYWORD_INTO));
    keyword_map.insert(std::make_pair("invisible", KEYWORD_INVISIBLE));
    keyword_map.insert(std::make_pair("invoker", KEYWORD_INVOKER));
    keyword_map.insert(std::make_pair("io", KEYWORD_IO));
    keyword_map.insert(std::make_pair("io_after_gtids", KEYWORD_IO_AFTER_GTIDS));
    keyword_map.insert(std::make_pair("io_before_gtids", KEYWORD_IO_BEFORE_GTIDS));
    keyword_map.insert(std::make_pair("io_thread", KEYWORD_IO_THREAD));
    keyword_map.insert(std::make_pair("ipc", KEYWORD_IPC));
    keyword_map.insert(std::make_pair("is", KEYWORD_IS));
    keyword_map.insert(std::make_pair("isolation", KEYWORD_ISOLATION));
    keyword_map.insert(std::make_pair("issuer", KEYWORD_ISSUER));
    keyword_map.insert(std::make_pair("iterate", KEYWORD_ITERATE));
    keyword_map.insert(std::make_pair("join", KEYWORD_JOIN));
    keyword_map.insert(std::make_pair("json", KEYWORD_JSON));
    keyword_map.insert(std::make_pair("json_table", KEYWORD_JSON_TABLE));
    keyword_map.insert(std::make_pair("json_value", KEYWORD_JSON_VALUE));
    keyword_map.insert(std::make_pair("key", KEYWORD_KEY));
    keyword_map.insert(std::make_pair("keyring", KEYWORD_KEYRING));
    keyword_map.insert(std::make_pair("keys", KEYWORD_KEYS));
    keyword_map.insert(std::make_pair("key_block_size", KEYWORD_KEY_BLOCK_SIZE));
    keyword_map.insert(std::make_pair("kill", KEYWORD_KILL));
    keyword_map.insert(std::make_pair("lag", KEYWORD_LAG));
    keyword_map.insert(std::make_pair("language", KEYWORD_LANGUAGE));
    keyword_map.insert(std::make_pair("last", KEYWORD_LAST));
    keyword_map.insert(std::make_pair("last_value", KEYWORD_LAST_VALUE));
    keyword_map.insert(std::make_pair("lateral", KEYWORD_LATERAL));
    keyword_map.insert(std::make_pair("lead", KEYWORD_LEAD));
    keyword_map.insert(std::make_pair("leading", KEYWORD_LEADING));
    keyword_map.insert(std::make_pair("leave", KEYWORD_LEAVE));
    keyword_map.insert(std::make_pair("leaves", KEYWORD_LEAVES));
    keyword_map.insert(std::make_pair("left", KEYWORD_LEFT));
    keyword_map.insert(std::make_pair("less", KEYWORD_LESS));
    keyword_map.insert(std::make_pair("level", KEYWORD_LEVEL));
    keyword_map.insert(std::make_pair("like", KEYWORD_LIKE));
    keyword_map.insert(std::make_pair("limit", KEYWORD_LIMIT));
    keyword_map.insert(std::make_pair("linear", KEYWORD_LINEAR));
    keyword_map.insert(std::make_pair("lines", KEYWORD_LINES));
    keyword_map.insert(std::make_pair("linestring", KEYWORD_LINESTRING));
    keyword_map.insert(std::make_pair("list", KEYWORD_LIST));
    keyword_map.insert(std::make_pair("load", KEYWORD_LOAD));
    keyword_map.insert(std::make_pair("local", KEYWORD_LOCAL));
    keyword_map.insert(std::make_pair("localtime", KEYWORD_LOCALTIME));
    keyword_map.insert(std::make_pair("localtimestamp", KEYWORD_LOCALTIMESTAMP));
    keyword_map.insert(std::make_pair("lock", KEYWORD_LOCK));
    keyword_map.insert(std::make_pair("locked", KEYWORD_LOCKED));
    keyword_map.insert(std::make_pair("locks", KEYWORD_LOCKS));
    keyword_map.insert(std::make_pair("log", KEYWORD_LOG));
    keyword_map.insert(std::make_pair("logfile", KEYWORD_LOGFILE));
    keyword_map.insert(std::make_pair("logs", KEYWORD_LOGS));
    keyword_map.insert(std::make_pair("long", KEYWORD_LONG));
    keyword_map.insert(std::make_pair("longblob", KEYWORD_LONGBLOB));
    keyword_map.insert(std::make_pair("longtext", KEYWORD_LONGTEXT));
    keyword_map.insert(std::make_pair("loop", KEYWORD_LOOP));
    keyword_map.insert(std::make_pair("low_priority", KEYWORD_LOW_PRIORITY));
    keyword_map.insert(std::make_pair("manual", KEYWORD_MANUAL));
    keyword_map.insert(std::make_pair("master", KEYWORD_MASTER));
    keyword_map.insert(std::make_pair("master_auto_position", KEYWORD_MASTER_AUTO_POSITION));
    keyword_map.insert(std::make_pair("master_bind", KEYWORD_MASTER_BIND));
    keyword_map.insert(std::make_pair("master_compression_algorithm", KEYWORD_MASTER_COMPRESSION_ALGORITHM));
    keyword_map.insert(std::make_pair("master_connect_retry", KEYWORD_MASTER_CONNECT_RETRY));
    keyword_map.insert(std::make_pair("master_delay", KEYWORD_MASTER_DELAY));
    keyword_map.insert(std::make_pair("master_heartbeat_period", KEYWORD_MASTER_HEARTBEAT_PERIOD));
    keyword_map.insert(std::make_pair("master_host", KEYWORD_MASTER_HOST));
    keyword_map.insert(std::make_pair("master_log_file", KEYWORD_MASTER_LOG_FILE));
    keyword_map.insert(std::make_pair("master_log_pos", KEYWORD_MASTER_LOG_POS));
    keyword_map.insert(std::make_pair("master_password", KEYWORD_MASTER_PASSWORD));
    keyword_map.insert(std::make_pair("master_port", KEYWORD_MASTER_PORT));
    keyword_map.insert(std::make_pair("master_public_key_path", KEYWORD_MASTER_PUBLIC_KEY_PATH));
    keyword_map.insert(std::make_pair("master_retry_count", KEYWORD_MASTER_RETRY_COUNT));
    keyword_map.insert(std::make_pair("master_ssl", KEYWORD_MASTER_SSL));
    keyword_map.insert(std::make_pair("master_ssl_ca", KEYWORD_MASTER_SSL_CA));
    keyword_map.insert(std::make_pair("master_ssl_capath", KEYWORD_MASTER_SSL_CAPATH));
    keyword_map.insert(std::make_pair("master_ssl_cert", KEYWORD_MASTER_SSL_CERT));
    keyword_map.insert(std::make_pair("master_ssl_cipher", KEYWORD_MASTER_SSL_CIPHER));
    keyword_map.insert(std::make_pair("master_ssl_crl", KEYWORD_MASTER_SSL_CRL));
    keyword_map.insert(std::make_pair("master_ssl_crlpath", KEYWORD_MASTER_SSL_CRLPATH));
    keyword_map.insert(std::make_pair("master_ssl_key", KEYWORD_MASTER_SSL_KEY));
    keyword_map.insert(std::make_pair("master_ssl_verify_server_cert", KEYWORD_MASTER_SSL_VERIFY_SERVER_CERT));
    keyword_map.insert(std::make_pair("master_tls_ciphersuites", KEYWORD_MASTER_TLS_CIPHERSUITES));
    keyword_map.insert(std::make_pair("master_tls_version", KEYWORD_MASTER_TLS_VERSION));
    keyword_map.insert(std::make_pair("master_user", KEYWORD_MASTER_USER));
    keyword_map.insert(std::make_pair("master_zstd_compression_level", KEYWORD_MASTER_ZSTD_COMPRESSION_LEVEL));
    keyword_map.insert(std::make_pair("match", KEYWORD_MATCH));
    keyword_map.insert(std::make_pair("max_value", KEYWORD_MAX_VALUE));
    keyword_map.insert(std::make_pair("max_connections_per_hour", KEYWORD_MAX_CONNECTIONS_PER_HOUR));
    keyword_map.insert(std::make_pair("max_queries_per_hour", KEYWORD_MAX_QUERIES_PER_HOUR));
    keyword_map.insert(std::make_pair("max_rows", KEYWORD_MAX_ROWS));
    keyword_map.insert(std::make_pair("max_size", KEYWORD_MAX_SIZE));
    keyword_map.insert(std::make_pair("max_updates_per_hour", KEYWORD_MAX_UPDATES_PER_HOUR));
    keyword_map.insert(std::make_pair("max_user_connections", KEYWORD_MAX_USER_CONNECTIONS));
    keyword_map.insert(std::make_pair("medium", KEYWORD_MEDIUM));
    keyword_map.insert(std::make_pair("mediumblob", KEYWORD_MEDIUMBLOB));
    keyword_map.insert(std::make_pair("mediumint", KEYWORD_MEDIUMINT));
    keyword_map.insert(std::make_pair("mediumtext", KEYWORD_MEDIUMTEXT));
    keyword_map.insert(std::make_pair("member", KEYWORD_MEMBER));
    keyword_map.insert(std::make_pair("memory", KEYWORD_MEMORY));
    keyword_map.insert(std::make_pair("merge", KEYWORD_MERGE));
    keyword_map.insert(std::make_pair("message_text", KEYWORD_MESSAGE_TEXT));
    keyword_map.insert(std::make_pair("microsecond", KEYWORD_MICROSECOND));
    keyword_map.insert(std::make_pair("middleint", KEYWORD_MIDDLEINT));
    keyword_map.insert(std::make_pair("migrate", KEYWORD_MIGRATE));
    keyword_map.insert(std::make_pair("minute", KEYWORD_MINUTE));
    keyword_map.insert(std::make_pair("minute_microsecond", KEYWORD_MINUTE_MICROSECOND));
    keyword_map.insert(std::make_pair("minute_second", KEYWORD_MINUTE_SECOND));
    keyword_map.insert(std::make_pair("min_rows", KEYWORD_MIN_ROWS));
    keyword_map.insert(std::make_pair("mod", KEYWORD_MOD));
    keyword_map.insert(std::make_pair("mode", KEYWORD_MODE));
    keyword_map.insert(std::make_pair("modifies", KEYWORD_MODIFIES));
    keyword_map.insert(std::make_pair("modify", KEYWORD_MODIFY));
    keyword_map.insert(std::make_pair("month", KEYWORD_MONTH));
    keyword_map.insert(std::make_pair("multilinestring", KEYWORD_MULTILINESTRING));
    keyword_map.insert(std::make_pair("multipoint", KEYWORD_MULTIPOINT));
    keyword_map.insert(std::make_pair("multipolygon", KEYWORD_MULTIPOLYGON));
    keyword_map.insert(std::make_pair("mutex", KEYWORD_MUTEX));
    keyword_map.insert(std::make_pair("mysql_errno", KEYWORD_MYSQL_ERRNO));
    keyword_map.insert(std::make_pair("name", KEYWORD_NAME));
    keyword_map.insert(std::make_pair("names", KEYWORD_NAMES));
    keyword_map.insert(std::make_pair("national", KEYWORD_NATIONAL));
    keyword_map.insert(std::make_pair("natural", KEYWORD_NATURAL));
    keyword_map.insert(std::make_pair("nchar", KEYWORD_NCHAR));
    keyword_map.insert(std::make_pair("ndb", KEYWORD_NDB));
    keyword_map.insert(std::make_pair("ndbcluster", KEYWORD_NDBCLUSTER));
    keyword_map.insert(std::make_pair("nested", KEYWORD_NESTED));
    keyword_map.insert(std::make_pair("network_namespace", KEYWORD_NETWORK_NAMESPACE));
    keyword_map.insert(std::make_pair("never", KEYWORD_NEVER));
    keyword_map.insert(std::make_pair("new", KEYWORD_NEW));
    keyword_map.insert(std::make_pair("next", KEYWORD_NEXT));
    keyword_map.insert(std::make_pair("no", KEYWORD_NO));
    keyword_map.insert(std::make_pair("nodegroup", KEYWORD_NODEGROUP));
    keyword_map.insert(std::make_pair("none", KEYWORD_NONE));
    keyword_map.insert(std::make_pair("not", KEYWORD_NOT));
    keyword_map.insert(std::make_pair("not2", KEYWORD_NOT2));
    keyword_map.insert(std::make_pair("nowait", KEYWORD_NOWAIT));
    keyword_map.insert(std::make_pair("no_wait", KEYWORD_NO_WAIT));
    keyword_map.insert(std::make_pair("no_write_to_binlog", KEYWORD_NO_WRITE_TO_BINLOG));
    keyword_map.insert(std::make_pair("nth_value", KEYWORD_NTH_VALUE));
    keyword_map.insert(std::make_pair("ntile", KEYWORD_NTILE));
    keyword_map.insert(std::make_pair("null", KEYWORD_NULL));
    keyword_map.insert(std::make_pair("nulls", KEYWORD_NULLS));
    keyword_map.insert(std::make_pair("number", KEYWORD_NUMBER));
    keyword_map.insert(std::make_pair("numeric", KEYWORD_NUMERIC));
    keyword_map.insert(std::make_pair("nvarchar", KEYWORD_NVARCHAR));
    keyword_map.insert(std::make_pair("of", KEYWORD_OF));
    keyword_map.insert(std::make_pair("off", KEYWORD_OFF));
    keyword_map.insert(std::make_pair("offset", KEYWORD_OFFSET));
    keyword_map.insert(std::make_pair("oj", KEYWORD_OJ));
    keyword_map.insert(std::make_pair("old", KEYWORD_OLD));
    keyword_map.insert(std::make_pair("on", KEYWORD_ON));
    keyword_map.insert(std::make_pair("one", KEYWORD_ONE));
    keyword_map.insert(std::make_pair("only", KEYWORD_ONLY));
    keyword_map.insert(std::make_pair("open", KEYWORD_OPEN));
    keyword_map.insert(std::make_pair("optimize", KEYWORD_OPTIMIZE));
    keyword_map.insert(std::make_pair("optimizer_costs", KEYWORD_OPTIMIZER_COSTS));
    keyword_map.insert(std::make_pair("option", KEYWORD_OPTION));
    keyword_map.insert(std::make_pair("optional", KEYWORD_OPTIONAL));
    keyword_map.insert(std::make_pair("optionally", KEYWORD_OPTIONALLY));
    keyword_map.insert(std::make_pair("options", KEYWORD_OPTIONS));
    keyword_map.insert(std::make_pair("or", KEYWORD_OR));
    keyword_map.insert(std::make_pair("or2", KEYWORD_OR2));
    keyword_map.insert(std::make_pair("order", KEYWORD_ORDER));
    keyword_map.insert(std::make_pair("ordinality", KEYWORD_ORDINALITY));
    keyword_map.insert(std::make_pair("organization", KEYWORD_ORGANIZATION));
    keyword_map.insert(std::make_pair("others", KEYWORD_OTHERS));
    keyword_map.insert(std::make_pair("out", KEYWORD_OUT));
    keyword_map.insert(std::make_pair("outer", KEYWORD_OUTER));
    keyword_map.insert(std::make_pair("outfile", KEYWORD_OUTFILE));
    keyword_map.insert(std::make_pair("over", KEYWORD_OVER));
    keyword_map.insert(std::make_pair("owner", KEYWORD_OWNER));
    keyword_map.insert(std::make_pair("pack_keys", KEYWORD_PACK_KEYS));
    keyword_map.insert(std::make_pair("page", KEYWORD_PAGE));
    keyword_map.insert(std::make_pair("parallel", KEYWORD_PARALLEL));
    keyword_map.insert(std::make_pair("parser", KEYWORD_PARSER));
    keyword_map.insert(std::make_pair("parse_tree", KEYWORD_PARSE_TREE));
    keyword_map.insert(std::make_pair("partial", KEYWORD_PARTIAL));
    keyword_map.insert(std::make_pair("partition", KEYWORD_PARTITION));
    keyword_map.insert(std::make_pair("partitioning", KEYWORD_PARTITIONING));
    keyword_map.insert(std::make_pair("partitions", KEYWORD_PARTITIONS));
    keyword_map.insert(std::make_pair("password", KEYWORD_PASSWORD));
    keyword_map.insert(std::make_pair("password_lock_time", KEYWORD_PASSWORD_LOCK_TIME));
    keyword_map.insert(std::make_pair("path", KEYWORD_PATH));
    keyword_map.insert(std::make_pair("percent_rank", KEYWORD_PERCENT_RANK));
    keyword_map.insert(std::make_pair("persist", KEYWORD_PERSIST));
    keyword_map.insert(std::make_pair("persist_only", KEYWORD_PERSIST_ONLY));
    keyword_map.insert(std::make_pair("phase", KEYWORD_PHASE));
    keyword_map.insert(std::make_pair("plugin", KEYWORD_PLUGIN));
    keyword_map.insert(std::make_pair("plugins", KEYWORD_PLUGINS));
    keyword_map.insert(std::make_pair("plugin_dir", KEYWORD_PLUGIN_DIR));
    keyword_map.insert(std::make_pair("point", KEYWORD_POINT));
    keyword_map.insert(std::make_pair("polygon", KEYWORD_POLYGON));
    keyword_map.insert(std::make_pair("port", KEYWORD_PORT));
    keyword_map.insert(std::make_pair("precedes", KEYWORD_PRECEDES));
    keyword_map.insert(std::make_pair("preceding", KEYWORD_PRECEDING));
    keyword_map.insert(std::make_pair("precision", KEYWORD_PRECISION));
    keyword_map.insert(std::make_pair("prepare", KEYWORD_PREPARE));
    keyword_map.insert(std::make_pair("preserve", KEYWORD_PRESERVE));
    keyword_map.insert(std::make_pair("prev", KEYWORD_PREV));
    keyword_map.insert(std::make_pair("primary", KEYWORD_PRIMARY));
    keyword_map.insert(std::make_pair("privileges", KEYWORD_PRIVILEGES));
    keyword_map.insert(std::make_pair("privilege_checks_user", KEYWORD_PRIVILEGE_CHECKS_USER));
    keyword_map.insert(std::make_pair("procedure", KEYWORD_PROCEDURE));
    keyword_map.insert(std::make_pair("process", KEYWORD_PROCESS));
    keyword_map.insert(std::make_pair("processlist", KEYWORD_PROCESSLIST));
    keyword_map.insert(std::make_pair("profile", KEYWORD_PROFILE));
    keyword_map.insert(std::make_pair("profiles", KEYWORD_PROFILES));
    keyword_map.insert(std::make_pair("proxy", KEYWORD_PROXY));
    keyword_map.insert(std::make_pair("purge", KEYWORD_PURGE));
    keyword_map.insert(std::make_pair("qualify", KEYWORD_QUALIFY));
    keyword_map.insert(std::make_pair("quarter", KEYWORD_QUARTER));
    keyword_map.insert(std::make_pair("query", KEYWORD_QUERY));
    keyword_map.insert(std::make_pair("quick", KEYWORD_QUICK));
    keyword_map.insert(std::make_pair("random", KEYWORD_RANDOM));
    keyword_map.insert(std::make_pair("range", KEYWORD_RANGE));
    keyword_map.insert(std::make_pair("rank", KEYWORD_RANK));
    keyword_map.insert(std::make_pair("read", KEYWORD_READ));
    keyword_map.insert(std::make_pair("reads", KEYWORD_READS));
    keyword_map.insert(std::make_pair("read_only", KEYWORD_READ_ONLY));
    keyword_map.insert(std::make_pair("read_write", KEYWORD_READ_WRITE));
    keyword_map.insert(std::make_pair("real", KEYWORD_REAL));
    keyword_map.insert(std::make_pair("rebuild", KEYWORD_REBUILD));
    keyword_map.insert(std::make_pair("recover", KEYWORD_RECOVER));
    keyword_map.insert(std::make_pair("recursive", KEYWORD_RECURSIVE));
    keyword_map.insert(std::make_pair("redo_buffer_size", KEYWORD_REDO_BUFFER_SIZE));
    keyword_map.insert(std::make_pair("redundant", KEYWORD_REDUNDANT));
    keyword_map.insert(std::make_pair("reference", KEYWORD_REFERENCE));
    keyword_map.insert(std::make_pair("references", KEYWORD_REFERENCES));
    keyword_map.insert(std::make_pair("regexp", KEYWORD_REGEXP));
    keyword_map.insert(std::make_pair("registration", KEYWORD_REGISTRATION));
    keyword_map.insert(std::make_pair("relay", KEYWORD_RELAY));
    keyword_map.insert(std::make_pair("relaylog", KEYWORD_RELAYLOG));
    keyword_map.insert(std::make_pair("relay_log_file", KEYWORD_RELAY_LOG_FILE));
    keyword_map.insert(std::make_pair("relay_log_pos", KEYWORD_RELAY_LOG_POS));
    keyword_map.insert(std::make_pair("relay_thread", KEYWORD_RELAY_THREAD));
    keyword_map.insert(std::make_pair("release", KEYWORD_RELEASE));
    keyword_map.insert(std::make_pair("reload", KEYWORD_RELOAD));
    keyword_map.insert(std::make_pair("remove", KEYWORD_REMOVE));
    keyword_map.insert(std::make_pair("rename", KEYWORD_RENAME));
    keyword_map.insert(std::make_pair("reorganize", KEYWORD_REORGANIZE));
    keyword_map.insert(std::make_pair("repair", KEYWORD_REPAIR));
    keyword_map.insert(std::make_pair("repeat", KEYWORD_REPEAT));
    keyword_map.insert(std::make_pair("repeatable", KEYWORD_REPEATABLE));
    keyword_map.insert(std::make_pair("replace", KEYWORD_REPLACE));
    keyword_map.insert(std::make_pair("replica", KEYWORD_REPLICA));
    keyword_map.insert(std::make_pair("replicas", KEYWORD_REPLICAS));
    keyword_map.insert(std::make_pair("replicate_do_db", KEYWORD_REPLICATE_DO_DB));
    keyword_map.insert(std::make_pair("replicate_do_table", KEYWORD_REPLICATE_DO_TABLE));
    keyword_map.insert(std::make_pair("replicate_ignore_db", KEYWORD_REPLICATE_IGNORE_DB));
    keyword_map.insert(std::make_pair("replicate_ignore_table", KEYWORD_REPLICATE_IGNORE_TABLE));
    keyword_map.insert(std::make_pair("replicate_rewrite_db", KEYWORD_REPLICATE_REWRITE_DB));
    keyword_map.insert(std::make_pair("replicate_wild_do_table", KEYWORD_REPLICATE_WILD_DO_TABLE));
    keyword_map.insert(std::make_pair("replicate_wild_ignore_table", KEYWORD_REPLICATE_WILD_IGNORE_TABLE));
    keyword_map.insert(std::make_pair("replication", KEYWORD_REPLICATION));
    keyword_map.insert(std::make_pair("require", KEYWORD_REQUIRE));
    keyword_map.insert(std::make_pair("require_row_format", KEYWORD_REQUIRE_ROW_FORMAT));
    keyword_map.insert(std::make_pair("reset", KEYWORD_RESET));
    keyword_map.insert(std::make_pair("resignal", KEYWORD_RESIGNAL));
    keyword_map.insert(std::make_pair("resource", KEYWORD_RESOURCE));
    keyword_map.insert(std::make_pair("respect", KEYWORD_RESPECT));
    keyword_map.insert(std::make_pair("restart", KEYWORD_RESTART));
    keyword_map.insert(std::make_pair("restore", KEYWORD_RESTORE));
    keyword_map.insert(std::make_pair("restrict", KEYWORD_RESTRICT));
    keyword_map.insert(std::make_pair("resume", KEYWORD_RESUME));
    keyword_map.insert(std::make_pair("retain", KEYWORD_RETAIN));
    keyword_map.insert(std::make_pair("return", KEYWORD_RETURN));
    keyword_map.insert(std::make_pair("returned_sqlstate", KEYWORD_RETURNED_SQLSTATE));
    keyword_map.insert(std::make_pair("returning", KEYWORD_RETURNING));
    keyword_map.insert(std::make_pair("returns", KEYWORD_RETURNS));
    keyword_map.insert(std::make_pair("reuse", KEYWORD_REUSE));
    keyword_map.insert(std::make_pair("reverse", KEYWORD_REVERSE));
    keyword_map.insert(std::make_pair("revoke", KEYWORD_REVOKE));
    keyword_map.insert(std::make_pair("right", KEYWORD_RIGHT));
    keyword_map.insert(std::make_pair("rlike", KEYWORD_RLIKE));
    keyword_map.insert(std::make_pair("role", KEYWORD_ROLE));
    keyword_map.insert(std::make_pair("rollback", KEYWORD_ROLLBACK));
    keyword_map.insert(std::make_pair("rollup", KEYWORD_ROLLUP));
    keyword_map.insert(std::make_pair("rotate", KEYWORD_ROTATE));
    keyword_map.insert(std::make_pair("routine", KEYWORD_ROUTINE));
    keyword_map.insert(std::make_pair("row", KEYWORD_ROW));
    keyword_map.insert(std::make_pair("rows", KEYWORD_ROWS));
    keyword_map.insert(std::make_pair("row_count", KEYWORD_ROW_COUNT));
    keyword_map.insert(std::make_pair("row_format", KEYWORD_ROW_FORMAT));
    keyword_map.insert(std::make_pair("row_number", KEYWORD_ROW_NUMBER));
    keyword_map.insert(std::make_pair("rtree", KEYWORD_RTREE));
    keyword_map.insert(std::make_pair("s3", KEYWORD_S3));
    keyword_map.insert(std::make_pair("savepoint", KEYWORD_SAVEPOINT));
    keyword_map.insert(std::make_pair("schedule", KEYWORD_SCHEDULE));
    keyword_map.insert(std::make_pair("schema", KEYWORD_SCHEMA));
    keyword_map.insert(std::make_pair("schemas", KEYWORD_SCHEMAS));
    keyword_map.insert(std::make_pair("schema_name", KEYWORD_SCHEMA_NAME));
    keyword_map.insert(std::make_pair("second", KEYWORD_SECOND));
    keyword_map.insert(std::make_pair("secondary", KEYWORD_SECONDARY));
    keyword_map.insert(std::make_pair("secondary_engine", KEYWORD_SECONDARY_ENGINE));
    keyword_map.insert(std::make_pair("secondary_engine_attribute", KEYWORD_SECONDARY_ENGINE_ATTRIBUTE));
    keyword_map.insert(std::make_pair("secondary_load", KEYWORD_SECONDARY_LOAD));
    keyword_map.insert(std::make_pair("secondary_unload", KEYWORD_SECONDARY_UNLOAD));
    keyword_map.insert(std::make_pair("second_microsecond", KEYWORD_SECOND_MICROSECOND));
    keyword_map.insert(std::make_pair("security", KEYWORD_SECURITY));
    keyword_map.insert(std::make_pair("select", KEYWORD_SELECT));
    keyword_map.insert(std::make_pair("sensitive", KEYWORD_SENSITIVE));
    keyword_map.insert(std::make_pair("separator", KEYWORD_SEPARATOR));
    keyword_map.insert(std::make_pair("serial", KEYWORD_SERIAL));
    keyword_map.insert(std::make_pair("serializable", KEYWORD_SERIALIZABLE));
    keyword_map.insert(std::make_pair("server", KEYWORD_SERVER));
    keyword_map.insert(std::make_pair("session", KEYWORD_SESSION));
    keyword_map.insert(std::make_pair("set", KEYWORD_SET));
    keyword_map.insert(std::make_pair("share", KEYWORD_SHARE));
    keyword_map.insert(std::make_pair("show", KEYWORD_SHOW));
    keyword_map.insert(std::make_pair("shutdown", KEYWORD_SHUTDOWN));
    keyword_map.insert(std::make_pair("signal", KEYWORD_SIGNAL));
    keyword_map.insert(std::make_pair("signed", KEYWORD_SIGNED));
    keyword_map.insert(std::make_pair("simple", KEYWORD_SIMPLE));
    keyword_map.insert(std::make_pair("skip", KEYWORD_SKIP));
    keyword_map.insert(std::make_pair("slave", KEYWORD_SLAVE));
    keyword_map.insert(std::make_pair("slow", KEYWORD_SLOW));
    keyword_map.insert(std::make_pair("smallint", KEYWORD_SMALLINT));
    keyword_map.insert(std::make_pair("snapshot", KEYWORD_SNAPSHOT));
    keyword_map.insert(std::make_pair("socket", KEYWORD_SOCKET));
    keyword_map.insert(std::make_pair("some", KEYWORD_SOME));
    keyword_map.insert(std::make_pair("soname", KEYWORD_SONAME));
    keyword_map.insert(std::make_pair("sounds", KEYWORD_SOUNDS));
    keyword_map.insert(std::make_pair("source", KEYWORD_SOURCE));
    keyword_map.insert(std::make_pair("source_auto_position", KEYWORD_SOURCE_AUTO_POSITION));
    keyword_map.insert(std::make_pair("source_bind", KEYWORD_SOURCE_BIND));
    keyword_map.insert(std::make_pair("source_compression_algorithm", KEYWORD_SOURCE_COMPRESSION_ALGORITHM));
    keyword_map.insert(std::make_pair("source_connect_retry", KEYWORD_SOURCE_CONNECT_RETRY));
    keyword_map.insert(std::make_pair("source_delay", KEYWORD_SOURCE_DELAY));
    keyword_map.insert(std::make_pair("source_heartbeat_period", KEYWORD_SOURCE_HEARTBEAT_PERIOD));
    keyword_map.insert(std::make_pair("source_host", KEYWORD_SOURCE_HOST));
    keyword_map.insert(std::make_pair("source_log_file", KEYWORD_SOURCE_LOG_FILE));
    keyword_map.insert(std::make_pair("source_log_pos", KEYWORD_SOURCE_LOG_POS));
    keyword_map.insert(std::make_pair("source_password", KEYWORD_SOURCE_PASSWORD));
    keyword_map.insert(std::make_pair("source_port", KEYWORD_SOURCE_PORT));
    keyword_map.insert(std::make_pair("source_public_key_path", KEYWORD_SOURCE_PUBLIC_KEY_PATH));
    keyword_map.insert(std::make_pair("source_retry_count", KEYWORD_SOURCE_RETRY_COUNT));
    keyword_map.insert(std::make_pair("source_ssl", KEYWORD_SOURCE_SSL));
    keyword_map.insert(std::make_pair("source_ssl_ca", KEYWORD_SOURCE_SSL_CA));
    keyword_map.insert(std::make_pair("source_ssl_capath", KEYWORD_SOURCE_SSL_CAPATH));
    keyword_map.insert(std::make_pair("source_ssl_cert", KEYWORD_SOURCE_SSL_CERT));
    keyword_map.insert(std::make_pair("source_ssl_cipher", KEYWORD_SOURCE_SSL_CIPHER));
    keyword_map.insert(std::make_pair("source_ssl_crl", KEYWORD_SOURCE_SSL_CRL));
    keyword_map.insert(std::make_pair("source_ssl_crlpath", KEYWORD_SOURCE_SSL_CRLPATH));
    keyword_map.insert(std::make_pair("source_ssl_key", KEYWORD_SOURCE_SSL_KEY));
    keyword_map.insert(std::make_pair("source_ssl_verify_server_cert", KEYWORD_SOURCE_SSL_VERIFY_SERVER_CERT));
    keyword_map.insert(std::make_pair("source_tls_ciphersuites", KEYWORD_SOURCE_TLS_CIPHERSUITES));
    keyword_map.insert(std::make_pair("source_tls_version", KEYWORD_SOURCE_TLS_VERSION));
    keyword_map.insert(std::make_pair("source_user", KEYWORD_SOURCE_USER));
    keyword_map.insert(std::make_pair("source_zstd_compression_level", KEYWORD_SOURCE_ZSTD_COMPRESSION_LEVEL));
    keyword_map.insert(std::make_pair("spatial", KEYWORD_SPATIAL));
    keyword_map.insert(std::make_pair("specific", KEYWORD_SPECIFIC));
    keyword_map.insert(std::make_pair("sql", KEYWORD_SQL));
    keyword_map.insert(std::make_pair("sqlexception", KEYWORD_SQLEXCEPTION));
    keyword_map.insert(std::make_pair("sqlstate", KEYWORD_SQLSTATE));
    keyword_map.insert(std::make_pair("sqlwarning", KEYWORD_SQLWARNING));
    keyword_map.insert(std::make_pair("sql_after_gtids", KEYWORD_SQL_AFTER_GTIDS));
    keyword_map.insert(std::make_pair("sql_after_mts_gaps", KEYWORD_SQL_AFTER_MTS_GAPS));
    keyword_map.insert(std::make_pair("sql_before_gtids", KEYWORD_SQL_BEFORE_GTIDS));
    keyword_map.insert(std::make_pair("sql_big_result", KEYWORD_SQL_BIG_RESULT));
    keyword_map.insert(std::make_pair("sql_buffer_result", KEYWORD_SQL_BUFFER_RESULT));
    keyword_map.insert(std::make_pair("sql_calc_found_rows", KEYWORD_SQL_CALC_FOUND_ROWS));
    keyword_map.insert(std::make_pair("sql_no_cache", KEYWORD_SQL_NO_CACHE));
    keyword_map.insert(std::make_pair("sql_small_result", KEYWORD_SQL_SMALL_RESULT));
    keyword_map.insert(std::make_pair("sql_thread", KEYWORD_SQL_THREAD));
    keyword_map.insert(std::make_pair("sql_tsi_day", KEYWORD_SQL_TSI_DAY));
    keyword_map.insert(std::make_pair("sql_tsi_hour", KEYWORD_SQL_TSI_HOUR));
    keyword_map.insert(std::make_pair("sql_tsi_minute", KEYWORD_SQL_TSI_MINUTE));
    keyword_map.insert(std::make_pair("sql_tsi_month", KEYWORD_SQL_TSI_MONTH));
    keyword_map.insert(std::make_pair("sql_tsi_quarter", KEYWORD_SQL_TSI_QUARTER));
    keyword_map.insert(std::make_pair("sql_tsi_second", KEYWORD_SQL_TSI_SECOND));
    keyword_map.insert(std::make_pair("sql_tsi_week", KEYWORD_SQL_TSI_WEEK));
    keyword_map.insert(std::make_pair("sql_tsi_year", KEYWORD_SQL_TSI_YEAR));
    keyword_map.insert(std::make_pair("srid", KEYWORD_SRID));
    keyword_map.insert(std::make_pair("ssl", KEYWORD_SSL));
    keyword_map.insert(std::make_pair("stacked", KEYWORD_STACKED));
    keyword_map.insert(std::make_pair("start", KEYWORD_START));
    keyword_map.insert(std::make_pair("starting", KEYWORD_STARTING));
    keyword_map.insert(std::make_pair("starts", KEYWORD_STARTS));
    keyword_map.insert(std::make_pair("stats_auto_recalc", KEYWORD_STATS_AUTO_RECALC));
    keyword_map.insert(std::make_pair("stats_persistent", KEYWORD_STATS_PERSISTENT));
    keyword_map.insert(std::make_pair("stats_sample_pages", KEYWORD_STATS_SAMPLE_PAGES));
    keyword_map.insert(std::make_pair("status", KEYWORD_STATUS));
    keyword_map.insert(std::make_pair("stop", KEYWORD_STOP));
    keyword_map.insert(std::make_pair("storage", KEYWORD_STORAGE));
    keyword_map.insert(std::make_pair("stored", KEYWORD_STORED));
    keyword_map.insert(std::make_pair("straight_join", KEYWORD_STRAIGHT_JOIN));
    keyword_map.insert(std::make_pair("stream", KEYWORD_STREAM));
    keyword_map.insert(std::make_pair("string", KEYWORD_STRING));
    keyword_map.insert(std::make_pair("subclass_origin", KEYWORD_SUBCLASS_ORIGIN));
    keyword_map.insert(std::make_pair("subject", KEYWORD_SUBJECT));
    keyword_map.insert(std::make_pair("subpartition", KEYWORD_SUBPARTITION));
    keyword_map.insert(std::make_pair("subpartitions", KEYWORD_SUBPARTITIONS));
    keyword_map.insert(std::make_pair("super", KEYWORD_SUPER));
    keyword_map.insert(std::make_pair("suspend", KEYWORD_SUSPEND));
    keyword_map.insert(std::make_pair("swaps", KEYWORD_SWAPS));
    keyword_map.insert(std::make_pair("switches", KEYWORD_SWITCHES));
    keyword_map.insert(std::make_pair("system", KEYWORD_SYSTEM));
    keyword_map.insert(std::make_pair("table", KEYWORD_TABLE));
    keyword_map.insert(std::make_pair("tables", KEYWORD_TABLES));
    keyword_map.insert(std::make_pair("tablesample", KEYWORD_TABLESAMPLE));
    keyword_map.insert(std::make_pair("tablespace", KEYWORD_TABLESPACE));
    keyword_map.insert(std::make_pair("table_checksum", KEYWORD_TABLE_CHECKSUM));
    keyword_map.insert(std::make_pair("table_name", KEYWORD_TABLE_NAME));
    keyword_map.insert(std::make_pair("temporary", KEYWORD_TEMPORARY));
    keyword_map.insert(std::make_pair("temptable", KEYWORD_TEMPTABLE));
    keyword_map.insert(std::make_pair("terminated", KEYWORD_TERMINATED));
    keyword_map.insert(std::make_pair("text", KEYWORD_TEXT));
    keyword_map.insert(std::make_pair("than", KEYWORD_THAN));
    keyword_map.insert(std::make_pair("then", KEYWORD_THEN));
    keyword_map.insert(std::make_pair("thread_priority", KEYWORD_THREAD_PRIORITY));
    keyword_map.insert(std::make_pair("ties", KEYWORD_TIES));
    keyword_map.insert(std::make_pair("time", KEYWORD_TIME));
    keyword_map.insert(std::make_pair("timestamp", KEYWORD_TIMESTAMP));
    keyword_map.insert(std::make_pair("timestamp_add", KEYWORD_TIMESTAMP_ADD));
    keyword_map.insert(std::make_pair("timestamp_diff", KEYWORD_TIMESTAMP_DIFF));
    keyword_map.insert(std::make_pair("tinyblob", KEYWORD_TINYBLOB));
    keyword_map.insert(std::make_pair("tinyint", KEYWORD_TINYINT));
    keyword_map.insert(std::make_pair("tinytext_syn", KEYWORD_TINYTEXT_SYN));
    keyword_map.insert(std::make_pair("tls", KEYWORD_TLS));
    keyword_map.insert(std::make_pair("to", KEYWORD_TO));
    keyword_map.insert(std::make_pair("trailing", KEYWORD_TRAILING));
    keyword_map.insert(std::make_pair("transaction", KEYWORD_TRANSACTION));
    keyword_map.insert(std::make_pair("trigger", KEYWORD_TRIGGER));
    keyword_map.insert(std::make_pair("triggers", KEYWORD_TRIGGERS));
    keyword_map.insert(std::make_pair("true", KEYWORD_TRUE));
    keyword_map.insert(std::make_pair("truncate", KEYWORD_TRUNCATE));
    keyword_map.insert(std::make_pair("type", KEYWORD_TYPE));
    keyword_map.insert(std::make_pair("types", KEYWORD_TYPES));
    keyword_map.insert(std::make_pair("unbounded", KEYWORD_UNBOUNDED));
    keyword_map.insert(std::make_pair("uncommitted", KEYWORD_UNCOMMITTED));
    keyword_map.insert(std::make_pair("undefined", KEYWORD_UNDEFINED));
    keyword_map.insert(std::make_pair("undo", KEYWORD_UNDO));
    keyword_map.insert(std::make_pair("undofile", KEYWORD_UNDOFILE));
    keyword_map.insert(std::make_pair("undo_buffer_size", KEYWORD_UNDO_BUFFER_SIZE));
    keyword_map.insert(std::make_pair("unicode", KEYWORD_UNICODE));
    keyword_map.insert(std::make_pair("uninstall", KEYWORD_UNINSTALL));
    keyword_map.insert(std::make_pair("union", KEYWORD_UNION));
    keyword_map.insert(std::make_pair("unique", KEYWORD_UNIQUE));
    keyword_map.insert(std::make_pair("unknown", KEYWORD_UNKNOWN));
    keyword_map.insert(std::make_pair("unlock", KEYWORD_UNLOCK));
    keyword_map.insert(std::make_pair("unregister", KEYWORD_UNREGISTER));
    keyword_map.insert(std::make_pair("unsigned", KEYWORD_UNSIGNED));
    keyword_map.insert(std::make_pair("until", KEYWORD_UNTIL));
    keyword_map.insert(std::make_pair("update", KEYWORD_UPDATE));
    keyword_map.insert(std::make_pair("upgrade", KEYWORD_UPGRADE));
    keyword_map.insert(std::make_pair("url", KEYWORD_URL));
    keyword_map.insert(std::make_pair("usage", KEYWORD_USAGE));
    keyword_map.insert(std::make_pair("use", KEYWORD_USE));
    keyword_map.insert(std::make_pair("user", KEYWORD_USER));
    keyword_map.insert(std::make_pair("user_resources", KEYWORD_USER_RESOURCES));
    keyword_map.insert(std::make_pair("use_frm", KEYWORD_USE_FRM));
    keyword_map.insert(std::make_pair("using", KEYWORD_USING));
    keyword_map.insert(std::make_pair("utc_date", KEYWORD_UTC_DATE));
    keyword_map.insert(std::make_pair("utc_time", KEYWORD_UTC_TIME));
    keyword_map.insert(std::make_pair("utc_timestamp", KEYWORD_UTC_TIMESTAMP));
    keyword_map.insert(std::make_pair("validation", KEYWORD_VALIDATION));
    keyword_map.insert(std::make_pair("value", KEYWORD_VALUE));
    keyword_map.insert(std::make_pair("values", KEYWORD_VALUES));
    keyword_map.insert(std::make_pair("varbinary", KEYWORD_VARBINARY));
    keyword_map.insert(std::make_pair("varchar", KEYWORD_VARCHAR));
    keyword_map.insert(std::make_pair("varcharacter", KEYWORD_VARCHARACTER));
    keyword_map.insert(std::make_pair("variables", KEYWORD_VARIABLES));
    keyword_map.insert(std::make_pair("varying", KEYWORD_VARYING));
    keyword_map.insert(std::make_pair("vcpu", KEYWORD_VCPU));
    keyword_map.insert(std::make_pair("view", KEYWORD_VIEW));
    keyword_map.insert(std::make_pair("virtual", KEYWORD_VIRTUAL));
    keyword_map.insert(std::make_pair("visible", KEYWORD_VISIBLE));
    keyword_map.insert(std::make_pair("wait", KEYWORD_WAIT));
    keyword_map.insert(std::make_pair("warnings", KEYWORD_WARNINGS));
    keyword_map.insert(std::make_pair("week", KEYWORD_WEEK));
    keyword_map.insert(std::make_pair("weight_string", KEYWORD_WEIGHT_STRING));
    keyword_map.insert(std::make_pair("when", KEYWORD_WHEN));
    keyword_map.insert(std::make_pair("where", KEYWORD_WHERE));
    keyword_map.insert(std::make_pair("while", KEYWORD_WHILE));
    keyword_map.insert(std::make_pair("window", KEYWORD_WINDOW));
    keyword_map.insert(std::make_pair("with", KEYWORD_WITH));
    keyword_map.insert(std::make_pair("without", KEYWORD_WITHOUT));
    keyword_map.insert(std::make_pair("work", KEYWORD_WORK));
    keyword_map.insert(std::make_pair("wrapper", KEYWORD_WRAPPER));
    keyword_map.insert(std::make_pair("write", KEYWORD_WRITE));
    keyword_map.insert(std::make_pair("x509", KEYWORD_X509));
    keyword_map.insert(std::make_pair("xa", KEYWORD_XA));
    keyword_map.insert(std::make_pair("xid", KEYWORD_XID));
    keyword_map.insert(std::make_pair("xml", KEYWORD_XML));
    keyword_map.insert(std::make_pair("xor", KEYWORD_XOR));
    keyword_map.insert(std::make_pair("year", KEYWORD_YEAR));
    keyword_map.insert(std::make_pair("year_month", KEYWORD_YEAR_MONTH));
    keyword_map.insert(std::make_pair("zerofill", KEYWORD_ZEROFILL));
    keyword_map.insert(std::make_pair("zone", KEYWORD_ZONE));
    keyword_map.insert(std::make_pair("with_rollup", KEYWORD_WITH_ROLLUP));

    keyword_map.insert(std::make_pair("adddate", WORD_ADDDATE));
    keyword_map.insert(std::make_pair("curdate", WORD_CURDATE));
    keyword_map.insert(std::make_pair("curtime", WORD_CURTIME));
    keyword_map.insert(std::make_pair("date_add_interval", WORD_DATE_ADD_INTERVAL));
    keyword_map.insert(std::make_pair("date_sub_interval", WORD_DATE_SUB_INTERVAL));
    keyword_map.insert(std::make_pair("extract", WORD_EXTRACT));
    keyword_map.insert(std::make_pair("now", WORD_NOW));
    keyword_map.insert(std::make_pair("subdate", WORD_SUBDATE));
    keyword_map.insert(std::make_pair("sysdate", WORD_SYSDATE));
    keyword_map.insert(std::make_pair("bit_and", WORD_BIT_AND));
    keyword_map.insert(std::make_pair("bit_or", WORD_BIT_OR));
    keyword_map.insert(std::make_pair("bit_xor", WORD_BIT_XOR));
    keyword_map.insert(std::make_pair("count", WORD_COUNT));
    keyword_map.insert(std::make_pair("group_concat", WORD_GROUP_CONCAT));
    keyword_map.insert(std::make_pair("json_arrayagg", WORD_JSON_ARRAYAGG));
    keyword_map.insert(std::make_pair("json_objectagg", WORD_JSON_OBJECTAGG));
    keyword_map.insert(std::make_pair("max", WORD_MAX));
    keyword_map.insert(std::make_pair("min", WORD_MIN));
    keyword_map.insert(std::make_pair("std", WORD_STD));
    keyword_map.insert(std::make_pair("stddev_samp", WORD_STDDEV_SAMP));
    keyword_map.insert(std::make_pair("sum", WORD_SUM));
    keyword_map.insert(std::make_pair("var_samp", WORD_VAR_SAMP));
    keyword_map.insert(std::make_pair("variance", WORD_VARIANCE));
    keyword_map.insert(std::make_pair("substring", WORD_SUBSTRING));
    keyword_map.insert(std::make_pair("trim", WORD_TRIM));
    keyword_map.insert(std::make_pair("cast", WORD_CAST));
    keyword_map.insert(std::make_pair("st_collect", WORD_ST_COLLECT));

    return keyword_map;
}
